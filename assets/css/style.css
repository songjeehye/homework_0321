@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500600;700;800;900&display=swap');

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}

body{
    background: #081b29;
    color: #ededed;
}

header{
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    padding: 20px 10%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    z-index: 100;
}
/*
"position: fixed;"를 통해 menu bar를 최상단에 고정,
"top: 0;", "left: 0;" 속성 추가로 header의 top과 left에 고정
양 사이드에 빈틈없이 menu bar를 고정하고 싶다면,
1. "top: 0;" + "left: 0;" + "right: 0;"
2. "width: 100%;"
>> 이럴 경우, 'header'의 영역이 부모인 'body'를 벗어나면서 하위 요소들이 가려지는 경우가 생기므로 'body'에 "padding-top"을 menu bar의 height 값만큼 추가하면 쉽게 해결할 수 있다.

[position 속성]
1. static : 디폴트값, 굳이 지정하지 않아도 기본 속성
2. relative : static 위치를 기준으로 top, right, bottom, left 방향으로 이동
3. absolute : 부모를 기준으로 top, right, bottom, left 방향으로 이동 ('static' 속성 무시하며, 부모 요소에 'relative, absolute, fixed'와 같은 tag가 주어지지 않았다면 가장 윗 tag를 기준으로 방향 이동)
4. fixed : 특정 위치에 고정, scroll을 조절하여도 위치 불변
5. sticky : scroll을 하지 않을 경우 'static' 속성과 같은 동작, scroll을 할 경우 'fixed'속성과 같은 동작 (부모 요소 안에 공간을 차지하기 때문_"backdrop-filter: blur;" 속성 사용 가능)
*top, right, bottom, left 값은 paading과 비슷한 기능*

[z-index tag]
photoshop 또는 figma의 레이어 순번과 비슷한 기능, 숫자가 클수록 우선 순위 (0~999 )
*/

.logo{
    font-size: 25px;
    color: #ededed;
    text-decoration: none;
    font-weight: 600;
}

/* .navbar{
    display: flex;
    gap: 35px;
} */

.navbar a{
    font-size: 18px;
    color: #ededed;
    text-decoration: none;
    font-weight: 500;
    margin-left: 35px;
    transition: .3s; /* hover animation */
}
/* "margin-left: 35px;" 대신, 부모 요소에 "gap: 35px;" 작성]ex. ".navbar{display: flex; gap: 35px;}" ('flex' 미 적용 시, 'gap' 또한 적용되지 않음) */
.navbar a:hover,
.navbar a.active{
    color: #00abf0;
}

.home{
    height: 100vh;
    display: flex;
    align-items: center;
    padding: 0 10%;
}
.home-content{
    max-width: 600px;
}
.home-content h1{
    font-size: 56px;
    font-weight: 700;
    line-height: 1.2;
}
.home-content h3{
    font-size: 32px;
    font-weight: 700;
    color: #00abf0;
}
.home-content p{
    font-size: 16px;
    margin: 20px 0 40px;
}
.home-content .btn-box{
    display: flex;
    justify-content: space-between;
    width: 345px;
    height: 50px;
}
.btn-box a{
    position: relative;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 150px;
    height: 100%;
    background: #00abf0;
    border: 2px solid #00abf0;
    border-radius: 8px;
    font-size: 19px;
    color: #081b29;
    text-decoration: none;
    font-weight: 600;
    letter-spacing: 1px;
    z-index: 1; 
    /* ".btn-box a:hover::before{width: 100%;}" box 보다 우선순위를 두기 위해 */
    overflow: hidden;
    /* ".btn-box a:hover::before{width: 100%;}" box가 ".btn-box a"의 border 바깥으로 빠져나가는 것을 방지 */
}
/*
[ "display: inline;" ]
- 속성 : 전후 줄바꿈없이 한 줄에 나란히 배치
- 대표적 inline 요소 : span, a, em
- 특징 : 'width, height' 속성 무시(해당 태그가 마크업하고 있는 컨텐츠의 크기 만큼만 공간을 차지하도록 되어 있기 때문), 'margin, padding' 속성은 left, right만 반영되며 top, bottom 반영되지 않음

[ "display: block;" ]
- 속성 : 전후 줄바꿈되어 요소 하나당 한줄 배치
- 대표적 block 요소 : div, p, h1
- 특징 : 'width, height, margin, padding' 속성 반영 가능

[ "display: inline-block;" ]
- 속성 : "display: inline;"의 속성(나란히 배치)과 "display: block;"의 특징(width, height 속성 및 top, right, bottom, left 속성 지정 가능)
>> 내부적으로 block, 외부적으로 inline 규칙을 따른다.
- 대표적 inline-block 요소 : button, input, select

*** "display: flex;" 와 "display: inline-flex" ***
"display: flex;" = block 특성의 flex container
"display: inline-flex;" = inline 특성의 flex container
>>
위 block 및 inline 특성은 container 내의 item 요소 정렬에 영향을 미치는 것이 아닌 container 정렬에 영향을 미친다.
(display: flex;) blcok 
(display: flex;) block
(display: inline-flex;)inline(display: inline-flex;)
*/

.btn-box a:nth-child(2){ /*last-child 변경 가능*/
    background: transparent;
    color: #00abf0;
}
/*
[ ":nth-child(n)" 가상 선택자]
= 부모 요소의 자식 요소 중에서 인덱스를 기준으로 n번째에 위치하는 요소들 선택
* 인덱스의 기준을 뒤부터 계산하고 싶다면 가상 선택자 ":nth-last-child()" 사용 *
종류 1. ":nth-child(n)" = 음이 아닌 정수 값
ex- "li:nth-child(3)" li 요소 중 3번째 li 선택
종류 2. ":nth-child(odd 또는 even)" = 키워드 값
ex- "li:nth-child(odd)" 자식 요소 중 홀수 번째 선택
    "li:nth-child(even)" 자식 요소 중 짝수 번째 선택
종류 3. ":nth-child(An+B)" = 사용자 지정 패턴
** A: 정수 인덱스 증감 단계, B: 정수 오프셋(생략 가능), n: 0부터 시작하는 모든 양의 정수
ex- ":nth-child(5n)" 5의 배수 번째 요소 선택
** 0 (=5x0), 5 (=5x1), 10 (=5x2) ... 
요소의 인덱스는 1부터 시작하기에 0번째 요소는 생략
    ":nth-child(5n-1)" 5의 배수 번째의 앞단 요소 선택
** -1 (=5x0-1), 4 (=5x1-1), 9 (=5x2-1) ...
요소의 인덱스는 1부터 시작하기에 -1번째 요소는 생략
*/

.btn-box a::before{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 100%;
    background: #081b29;
    z-index: -1;
    transition: .5s;
}
.btn-box a:hover::before{
    width: 100%;
}